(function() {

    angular.module('Biblioteca', ['ngResource', 'ngRoute']);

    function config($routeProvider) {
        // endpoints are declared here
        $routeProvider
            .when('/', {
                templateUrl: '/home/home.view.html',
                controller: 'homeCtrl',
                controllerAs: 'vm'
            })
            .when('/libros', {
                templateUrl: '/libros/home/home.view.html',
                controller: 'homeLibroCtrl',
                controllerAs: 'vm'
            })
            .when('/add-libro', {
                templateUrl: '/libros/form/libro-form.view.html',
                controller: 'addLibroCtrl',
                controllerAs: 'vm'
            })
            .when('/libro/:id', {
                templateUrl: '/libros/form/libro-form.view.html',
                controller: 'editLibroCtrl',
                controllerAs: 'vm'
            })
            .when('/libro/delete/:id', {
                templateUrl: '/libros/delete/libro-delete.view.html',
                controller: 'deleteLibroCtrl',
                controllerAs: 'vm'
            })
            .when('/prestamos', {
                templateUrl: '/prestamos/home/home.view.html',
                controller: 'homePrestamoCtrl',
                controllerAs: 'vm'
            })
            .when('/add-prestamo', {
                templateUrl: '/prestamos/form/prestamo-form.view.html',
                controller: 'addPrestamoCtrl',
                controllerAs: 'vm'
            })
            .when('/prestamo/:id', {
                templateUrl: '/prestamos/form/prestamo-form.view.html',
                controller: 'editPrestamoCtrl',
                controllerAs: 'vm'
            })
            .when('/prestamo/delete/:id', {
                templateUrl: '/prestamos/delete/prestamo-delete.view.html',
                controller: 'deletePrestamoCtrl',
                controllerAs: 'vm'
            })
            .when('/register', {
                templateUrl: '/auth/register/register.view.html',
                controller: 'registerCtrl',
                controllerAs: 'vm'
            })
            .when('/login', {
                templateUrl: '/auth/login/login.view.html',
                controller: 'loginCtrl',
                controllerAs: 'vm'
            })
            .otherwise({
                redirectTo: '/'
            });
    }

    angular
        .module('Biblioteca')
        .config(['$routeProvider', config]);

})();

// controller wrapped in anonymous function
// to isolate the code from global scope

(function() {

    angular
        .module('Biblioteca')
        .controller('homeCtrl', homeCtrl);

    homeCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

    function homeCtrl($scope, $resource, $location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.logout = function() {
            authentication.logout();
            $location.path('/#/');
        };

        vm.Libros = $resource('/api/libros');
        vm.Libros.query(function(libros) {
            $scope.libros = libros;
        });
    }

})();

// controller wrapped in anonymous function
// to isolate the code from global scope

(function() {

    angular
        .module('Biblioteca')
        .controller('homeLibroCtrl', homeLibroCtrl);

    homeLibroCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

    function homeLibroCtrl($scope, $resource, $location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.logout = function() {
            authentication.logout();
            $location.path('/#/');
        };

        vm.Libros = $resource('/api/libros');
        vm.Libros.query(function(libros) {
            $scope.libros = libros;
        });
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('addLibroCtrl', addLibroCtrl);

    addLibroCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

    function addLibroCtrl($scope, $resource, $location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.Libros = $resource('/api/libros', null, {
            save: {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        $scope.save = function() {
            vm.Libros.save($scope.libro, function() {
                $location.path('/#/libros');
            });
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('editLibroCtrl', editLibroCtrl);

    editLibroCtrl.$inject = ['$scope', '$resource', '$location', '$routeParams', 'authentication'];

    function editLibroCtrl($scope, $resource, $location, $routeParams, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.Libros = $resource('/api/libros/:id', {
            id: '@_id'
        }, {
            update: {
                method: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        vm.Libros.get({
            id: $routeParams.id
        }, function(libro) {
            $scope.libro = libro;
        });

        $scope.save = function() {
            vm.Libros.update($scope.libro, function() {
                $location.path('/#/libros');
            });
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('deleteLibroCtrl', deleteLibroCtrl);

    deleteLibroCtrl.$inject = ['$scope', '$resource', '$location', '$routeParams', 'authentication'];

    function deleteLibroCtrl($scope, $resource, $location, $routeParams, authentication) {
        var vm = this;

        vm.Libros = $resource('/api/libros/:id', {
            id: '@_id'
        }, {
            delete: {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        vm.Libros.get({
            id: $routeParams.id
        }, function(libro) {
            $scope.libro = libro;
        });

        $scope.delete = function() {
            vm.Libros.delete({
                id: $routeParams.id
            }, function(libro) {
                $location.path('/#/libros/');
            });
        };
    }

})();

// controller wrapped in anonymous function
// to isolate the code from global scope

(function() {

    angular
        .module('Biblioteca')
        .controller('homePrestamoCtrl', homePrestamoCtrl);

    homePrestamoCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

    function homePrestamoCtrl($scope, $resource, $location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.logout = function() {
            authentication.logout();
            $location.path('/#/');
        };

        vm.Prestamos = $resource('/api/prestamos');
        vm.Prestamos.query(function(prestamos) {
            $scope.prestamos = prestamos;
        });
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('addPrestamoCtrl', addPrestamoCtrl);

    addPrestamoCtrl.$inject = ['$scope', '$resource', '$location', 'authentication'];

    function addPrestamoCtrl($scope, $resource, $location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.Prestamos = $resource('/api/prestamos', null, {
            save: {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        $scope.save = function() {
            vm.Prestamos.save($scope.prestamo, function() {
                $location.path('/#/prestamos');
            });
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('editPrestamoCtrl', editPrestamoCtrl);

    editPrestamoCtrl.$inject = ['$scope', '$resource', '$location', '$routeParams', 'authentication'];

    function editPrestamoCtrl($scope, $resource, $location, $routeParams, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.Prestamos = $resource('/api/prestamos/:id', {
            id: '@_id'
        }, {
            update: {
                method: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        vm.Prestamos.get({
            id: $routeParams.id
        }, function(prestamo) {
            $scope.prestamo = prestamo;
        });

        $scope.save = function() {
            vm.Prestamos.update($scope.prestamo, function() {
                $location.path('/#/prestamos');
            });
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('deletePrestamoCtrl', deletePrestamoCtrl);

    deletePrestamoCtrl.$inject = ['$scope', '$resource', '$location', '$routeParams', 'authentication'];

    function deletePrestamoCtrl($scope, $resource, $location, $routeParams, authentication) {
        var vm = this;

        vm.Prestamos = $resource('/api/prestamos/:id', {
            id: '@_id'
        }, {
            delete: {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + authentication.getToken()
                }
            }
        });

        vm.Prestamos.get({
            id: $routeParams.id
        }, function(prestamo) {
            $scope.prestamo = prestamo;
        });

        $scope.delete = function() {
            vm.Prestamos.delete({
                id: $routeParams.id
            }, function(prestamo) {
                $location.path('/#/prestamos/');
            });
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .service('authentication', authentication);

    authentication.$inject = ['$http', '$window'];

    function authentication($http, $window) {

        var saveToken = function(token) {
            $window.localStorage['vidzy-token'] = token;
        };

        var getToken = function() {
            return $window.localStorage['vidzy-token'];
        };

        var isLoggedIn = function() {
            var token = getToken();

            if (token) {
                var payload = JSON.parse($window.atob(token.split('.')[1]));

                return payload.exp > Date.now() / 1000;
            } else {
                return false;
            }
        };

        var currentUser = function() {
            if (isLoggedIn()) {
                var token = getToken();
                var payload = JSON.parse($window.atob(token.split('.')[1]));
                return {
                    email: payload.email,
                    name: payload.name
                };
            }
        };

        register = function(user) {
            return $http.post('/api/register', user).success(function(data) {
                saveToken(data.token);
            });
        };

        login = function(user) {
            return $http.post('/api/login', user).success(function(data) {
                saveToken(data.token);
            });
        };

        logout = function() {
            $window.localStorage.removeItem('vidzy-token');
        };

        return {
            currentUser: currentUser,
            saveToken: saveToken,
            getToken: getToken,
            isLoggedIn: isLoggedIn,
            register: register,
            login: login,
            logout: logout
        };
    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('registerCtrl', registerCtrl);

    registerCtrl.$inject = ['$location', 'authentication'];

    function registerCtrl($location, authentication) {
        var vm = this;

        vm.pageHeader = {
            title: 'New Biblioteca account'
        };

        vm.credentials = {
            name: "",
            email: "",
            password: ""
        };

        vm.returnPage = $location.search().page || '/';

        vm.onSubmit = function() {
            vm.formError = "";
            if (!vm.credentials.name || !vm.credentials.email || !vm.credentials.password) {
                vm.formError = "Es necesario llenar todos los campos";
                return false;
            } else {
                vm.doRegister();
            }
        };

        vm.doRegister = function() {
            vm.formError = "";
            authentication
                .register(vm.credentials)
                .error(function(err) {
                    vm.formError = err;
                })
                .then(function() {
                    $location.search('page', null);
                    $location.path(vm.returnPage);
                });
        };

    }

})();

(function() {

    angular
        .module('Biblioteca')
        .controller('loginCtrl', loginCtrl);

    loginCtrl.$inject = ['$location', 'authentication'];

    function loginCtrl($location, authentication) {
        var vm = this;

        vm.pageHeader = {
            title: 'Sign in to Biblioteca'
        };

        vm.credentials = {
            email: "",
            password: ""
        };

        vm.returnPage = $location.search().page || '/';

        vm.onSubmit = function() {
            vm.formError = "";
            if (!vm.credentials.email || !vm.credentials.password) {
                vm.formError = "All fields required, please try again";
                return false;
            } else {
                vm.doLogin();
            }
        };

        vm.doLogin = function() {
            vm.formError = "";
            authentication
                .login(vm.credentials)
                .error(function(err) {
                    vm.formError = err;
                })
                .then(function() {
                    $location.search('page', null);
                    $location.path(vm.returnPage);
                });
        };

    }

})();
